package com.example.sms2tg

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.telephony.SmsMessage
import android.util.Log
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class SmsReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action != "android.provider.Telephony.SMS_RECEIVED") return
        Log.d("SmsToTelegram", "üì© SMS_RECEIVED triggered")

        val bundle: Bundle = intent.extras ?: run {
            Log.w("SmsToTelegram", "No extras in SMS intent")
            return
        }

        val pdus = bundle.get("pdus") as? Array<*> ?: run {
            Log.w("SmsToTelegram", "No PDUs in bundle")
            return
        }
        val format = bundle.getString("format")

        val messages = pdus.mapNotNull { pdu ->
            try {
                SmsMessage.createFromPdu(pdu as ByteArray, format)
            } catch (e: Exception) {
                Log.e("SmsToTelegram", "createFromPdu failed", e)
                null
            }
        }
        if (messages.isEmpty()) {
            Log.w("SmsToTelegram", "No valid SMS messages after parsing PDUs")
            return
        }

        // –ï–¥–∏–Ω—ã–π sender –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        val sender: String = messages.firstOrNull()?.originatingAddress.orEmpty()
        val fullText: String = messages
            .sortedBy { it.timestampMillis }
            .joinToString(separator = "") { it.messageBody.orEmpty() }

        Log.i("SmsToTelegram", "üì® SMS from $sender: ${fullText.take(200)}${if (fullText.length > 200) "..." else ""}")

        // –í—Å—ë, —á—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ: –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ –Ω–∞ IO
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val db = AppDatabase.get(context)

                // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–ª–æ–∫-–ª–∏—Å—Ç—É
                val blocked = db.blockedSenderDao().getAll()
                val isBlocked = blocked.any { rule ->
                    sender.contains(rule.pattern, ignoreCase = true)
                }

                if (isBlocked) {
                    // üö´ –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º Debug Mode
                    Logger.i(context, sender.ifEmpty { "unknown" }, "[BLOCKED] $fullText")
                    Log.d("SmsToTelegram", "üö´ Blocked by rule; sender=$sender")
                    return@launch
                }

                // 2Ô∏è‚É£ –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ª–æ–≥ + –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                Logger.i(context, sender.ifEmpty { "unknown" }, fullText)

                MessageQueueManager(context).addToQueue(
                    sender = sender,
                    body = fullText,
                    timestamp = System.currentTimeMillis()
                )

                // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (WorkManager –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏)
                SendPendingWorker.schedule(context)

            } catch (e: Exception) {
                Log.e("SmsToTelegram", "Error in SmsReceiver coroutine", e)
                // –õ–æ–≥ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ Debug Mode –≤–∫–ª—é—á—ë–Ω)
                Logger.e(context, "SmsReceiver", "Error: ${e.message}")
            }
        }
    }
}
