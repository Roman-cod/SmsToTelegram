package com.example.sms2tg

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.telephony.SmsMessage
import android.util.Log
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class SmsReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        Log.d("SmsToTelegram", "üì© SMS_RECEIVED triggered")

        val bundle: Bundle? = intent.extras
        if (bundle == null) {
            Log.w("SmsToTelegram", "‚ö†Ô∏è No extras in intent")
            return
        }

        try {
            val pdus = bundle["pdus"] as? Array<*>
            if (pdus == null || pdus.isEmpty()) {
                Log.w("SmsToTelegram", "‚ö†Ô∏è No PDUs in SMS intent")
                return
            }

            var messageBody = ""
            var sender = ""

            for (pdu in pdus) {
                val msg = SmsMessage.createFromPdu(pdu as ByteArray)
                messageBody += msg.messageBody
                sender = msg.originatingAddress ?: ""
            }

            Log.i("SmsToTelegram", "üì® SMS from $sender: $messageBody")

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SMS –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI)
            CoroutineScope(Dispatchers.IO).launch {
                try {
                    // 1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    val queueManager = MessageQueueManager(context)
                    queueManager.addToQueue(sender, messageBody, System.currentTimeMillis())
                    Log.d("SmsToTelegram", "‚úÖ Added to queue: $sender -> $messageBody")

                    // 2Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
                    try {
                        val db = AppDatabase.get(context)
                        db.logDao().insert(LogEntity(0, sender, messageBody, System.currentTimeMillis()))
                        Log.d("SmsToTelegram", "üìù Log inserted: $sender -> ${messageBody.take(50)}")
                    } catch (dbEx: Exception) {
                        Log.e("SmsToTelegram", "‚ùå Failed to insert log", dbEx)
                    }

                    // 3Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç
                    SendPendingWorker.schedule(context)
                    Log.d("SmsToTelegram", "üìÜ SendPendingWorker scheduled with network constraint")

                } catch (e: Exception) {
                    Log.e("SmsToTelegram", "‚ùå Failed to process SMS", e)
                }
            }

        } catch (e: Exception) {
            Log.e("SmsToTelegram", "‚ùå Error in SmsReceiver", e)
        }
    }
}
