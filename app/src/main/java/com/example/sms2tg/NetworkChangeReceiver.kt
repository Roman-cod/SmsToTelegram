package com.example.sms2tg

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.util.Log

/**
 * NetworkChangeReceiver
 * ---------------------
 * –≠—Ç–æ—Ç BroadcastReceiver –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ (Wi-Fi / –º–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç).
 * –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π, –æ–Ω –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
 * —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ –æ—Ñ–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏ (MessageQueueManager).
 */
class NetworkChangeReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (isNetworkAvailable(context)) {
            Log.d("NetworkChangeReceiver", "üì∂ –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
            val queueManager = MessageQueueManager(context)

            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ SMS
            queueManager.trySendAllPending()
        } else {
            Log.d("NetworkChangeReceiver", "üö´ –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏.")
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ (Wi-Fi –∏–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–π).
     *
     * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @return true –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ false
     */
    private fun isNetworkAvailable(context: Context): Boolean {
        val connectivityManager =
            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val network = connectivityManager.activeNetwork ?: return false
        val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
        return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
    }
}
