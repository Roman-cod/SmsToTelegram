package com.example.sms2tg

import android.content.Context
import android.util.Log

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *  val qm = MessageQueueManager(context)
 *  qm.addToQueue(sender, body)
 *
 *  // –ò–∑ WorkManager:
 *  val sentCount = qm.trySendAllPending()
 *
 * –õ–æ–≥–∏–∫–∞:
 *  - –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Room (QueueDatabase).
 *  - trySendAllPending() –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ pending, –±–µ—Ä–µ—Ç —Ç–µ–∫—É—â–∏–µ bot token/chat id –∏–∑ SharedPreferences,
 *    –ø—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–µ —á–µ—Ä–µ–∑ TelegramClient; –ø—Ä–∏ —É—Å–ø–µ—Ö–µ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å.
 *
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
 *  - –ú–µ—Ç–æ–¥ trySendAllPending() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–æ–º –ø–æ—Ç–æ–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è (–≤ Worker –æ–Ω —É–∂–µ background).
 *  - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
class MessageQueueManager(private val context: Context) {
    private val db = QueueDatabase.get(context)
    private val dao = db.pendingDao()
    private val prefs = context.getSharedPreferences("settings", Context.MODE_PRIVATE)

    /**
     * –î–æ–±–∞–≤–∏—Ç—å SMS –≤ –æ—á–µ—Ä–µ–¥—å.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ (Long)
     */
    fun addToQueue(sender: String, body: String, timestamp: Long = System.currentTimeMillis()): Long {
        return try {
            val id = dao.insert(PendingMessage(sender = sender, body = body, timestamp = timestamp))
            Log.d("SmsToTelegram", "Queued SMS id=$id sender=$sender body=${body.take(80)}")
            id
        } catch (e: Exception) {
            Log.e("SmsToTelegram", "Failed to insert to queue", e)
            -1
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     *  - –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ pending.
     *  - –ü–æ–ª—É—á–∞–µ–º token / chatId –∏–∑ SharedPreferences.
     *  - –ï—Å–ª–∏ token/chatId –ø—É—Å—Ç—ã–µ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0).
     *  - –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ TelegramClient.sendMessage().
     *    –ü—Ä–∏ —É—Å–ø–µ—Ö–µ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å.
     *
     * NOTE: —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ background (Worker/Executor).
     */
    fun trySendAllPending(): Int {
        val all = try {
            dao.getAll()
        } catch (e: Exception) {
            Log.e("SmsToTelegram", "Failed to read pending messages", e)
            return 0
        }

        if (all.isEmpty()) {
            Log.d("SmsToTelegram", "No pending messages to send")
            return 0
        }

        val token = prefs.getString("bot_token", "") ?: ""
        val chatId = prefs.getString("chat_id", "") ?: ""
        if (token.isBlank() || chatId.isBlank()) {
            Log.w("SmsToTelegram", "No bot_token or chat_id configured ‚Äî not sending pending messages")
            return 0
        }

        var successCount = 0
        val client = TelegramClient(context)

        for (msg in all) {
            try {
                val text = "üì© SMS from: ${msg.sender}\n\n${msg.body}"
                val ok = client.sendMessage(token, chatId, text)
                if (ok) {
                    dao.deleteById(msg.id)
                    successCount++
                    Log.d("SmsToTelegram", "Sent queued msg id=${msg.id}")
                } else {
                    Log.w("SmsToTelegram", "Failed to send queued msg id=${msg.id} ‚Äî will retry later")
                }
            } catch (e: Exception) {
                Log.e("SmsToTelegram", "Exception sending queued msg id=${msg.id}", e)
            }
        }

        Log.i("SmsToTelegram", "trySendAllPending: sent $successCount of ${all.size}")
        return successCount
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (—É–¥–∞–ª–∏—Ç—å –≤—Å—ë) ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Clear pending" –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
     */
    fun clearAll() {
        try {
            dao.clearAll()
            Log.d("SmsToTelegram", "Cleared all pending messages")
        } catch (e: Exception) {
            Log.e("SmsToTelegram", "Failed to clear pending", e)
        }
    }
}
